from typing import List, Optional
from pathlib import Path
from abc import ABC, abstractmethod
import numpy as np
import pandas as pd
from halotools.empirical_models import halo_mass_to_halo_radius
from dq import Cosmology, constants


class Catalogue(ABC):
    @classmethod
    def from_frame(cls, df: pd.DataFrame, boxsize: float):
        pos = df[["x", "y", "z"]].values
        vel = df[["v_x", "v_y", "v_z"]].values
        cols_1d = [
            c for c in df.columns if c not in ("x", "y", "z", "v_x", "v_y", "v_z")
        ]
        df_dict = {col: df[col].values for col in cols_1d}
        return cls(pos=pos, vel=vel, boxsize=boxsize, **df_dict)

    @classmethod
    def from_csv(cls, path: Path, boxsize: float):
        df = pd.read_csv(path)
        return cls.from_frame(
                df=df,
                boxsize=boxsize)

    def to_frame(self,):
        x, y, z = self.pos.T
        v_x, v_y, v_z = self.vel.T
        dict_attrs = {
            attr: getattr(self, attr)
            for attr in self.attrs_to_frame
            if getattr(self, attr) is not None
        }
        dict_attrs["x"] = x
        dict_attrs["y"] = y
        dict_attrs["z"] = z
        dict_attrs["v_x"] = v_x
        dict_attrs["v_y"] = v_y
        dict_attrs["v_z"] = v_z
        return pd.DataFrame(dict_attrs)

    def cut_by_number_density(self, ndens: float):
        n_objects = int(ndens * self.boxsize ** 3)
        sorted_mass_idx = np.argsort(self.mass)
        pos = self.pos[sorted_mass_idx][-n_objects:, :]
        vel = self.vel[sorted_mass_idx, :][-n_objects:, :]
        mass = self.mass[sorted_mass_idx][-n_objects:]
        return pos, vel, mass

    def compute_tpcf(self, edges, ndens: Optional[float] = None):
        from pycorr import TwoPointCorrelationFunction

        if ndens is not None:
            pos, _, _ = self.cut_by_number_density(ndens)
        else:
            pos = self.pos
        boxcenter = self.boxsize / 2
        return TwoPointCorrelationFunction(
            "s",
            edges,
            data_positions1=pos,
            engine="corrfunc",
            boxcenter=boxcenter,
            los="z",
            boxsize=self.boxsize,
            position_type="pos",
            nthreads=4,
        )

    def apply_redshift_distortion(self, pos, vel):
        scale_factor = 1./(1. + self.redshift)
        pos_err = vel/100./self.cosmology.efunc(self.redshift)/scale_factor
    zspace_pos = true_pos + pos_err
    if Lbox is not None:
        zspace_pos = enforce_periodicity_of_box(zspace_pos, Lbox)
    return zspace_pos


class HaloCatalogue(Catalogue):
    def __init__(
        self,
        pos: np.array,
        vel: np.array,
        mass: np.array,
        boxsize: float,
        radius: Optional[np.array] = None,
        mdef: str = "200m",
        cosmology: Optional[Cosmology] = None,
        redshift: Optional[float] = None,
    ):
        self.pos = pos
        self.vel = vel
        self.mass = mass
        self.boxsize = boxsize
        if radius is not None:
            self.radius = radius
        else:
            self.radius = halo_mass_to_halo_radius(
                mass=mass, cosmology=cosmology, redshift=redshift, mdef=mdef,
            ) * (1.0 + redshift)
        self.attrs_to_frame = ["mass", "radius"]

    @classmethod
    def from_dq(
        cls,
        run: int,
        snapshot: int,
        resolution: Optional[str] = "LR",
        log_M_min: Optional[float] = None,
        log_M_max: Optional[float] = None,
        mass_correction: bool = False,
    ):
        from dq import read_halo_data, snapshot_to_redshift, Cosmology

        pos, vel, mass = read_halo_data(
            run=run, snapshot=snapshot, high_res=True if resolution == "HR" else False
        )
        if mass_correction:
            n_particles = mass // constants.particle_mass
            correction_factor = 1.0 + n_particles ** (-0.55)
            mass *= correction_factor
        if log_M_min is not None or log_M_max is not None:
            mass_mask = (mass >= 10 ** log_M_min) & (mass <= 10 ** log_M_max)
            pos = pos[mass_mask]
            vel = vel[mass_mask]
            mass = mass[mass_mask]
        cosmology = Cosmology.from_run(run=run)
        return cls(
            pos=pos,
            vel=vel,
            mass=mass,
            mdef="200m",
            cosmology=cosmology,
            redshift=snapshot_to_redshift(snapshot),
            boxsize=2000.0 if resolution == "LR" else 1000.0,
        )

    @property
    def n_halos(self,):
        return len(self.pos)

    def compute_hmf(self, edges, differential=True):
        num_halos = np.histogram(self.mass, edges)[0]
        if differential:
            M_width = edges[1:] - edges[:-1]
            return num_halos / self.boxsize ** 3 / M_width
        else:
            num_halos = np.cumsum(num_halos[::-1])[::-1]
            return num_halos / self.boxsize ** 3


class GalaxyCatalogue(Catalogue):
    def __init__(
        self,
        pos: np.array,
        vel: np.array,
        host_mass: np.array,
        host_radius: np.array,
        host_centric_distance: np.array,
        host_id: np.array,
        galaxy_type: np.array,
        boxsize: float,
        host_concentration: Optional[np.array] = None,
    ):
        self.pos = pos
        self.vel = vel
        self.boxsize = boxsize
        self.host_mass = host_mass
        self.host_radius = host_radius
        self.host_concentration = host_concentration
        self.host_centric_distance = host_centric_distance
        self.host_id = host_id
        self.galaxy_type = galaxy_type
        self.attrs_to_frame = [
            "host_mass",
            "host_radius",
            "host_concentration",
            "host_centric_distance",
            "host_id",
            "galaxy_type",
        ]

    @property
    def n_galaxies(self,):
        return len(self.pos)

    @property
    def n_satellites(self,):
        return len(self.galaxy_type[self.galaxy_type == "satellite"])

    @property
    def n_centrals(self,):
        return len(self.galaxy_type[self.galaxy_type == "central"])

    @property
    def f_satellites(self,):
        return self.n_satellites / self.n_galaxies
